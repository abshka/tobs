import asyncio
import re
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple, Union

import aiofiles
from telethon import TelegramClient
from telethon.errors import (
    ChannelPrivateError,
    ChatAdminRequiredError,
    FloodWaitError,
    PeerIdInvalidError,
)
from telethon.tl.functions.channels import GetForumTopicsRequest
from telethon.tl.types import (
    Channel,
    Chat,
    ForumTopic,
    Message,
)

from src.config import Config, ExportTarget
from src.retry_manager import TELEGRAM_API_CONFIG, retry_manager
from src.utils import logger, sanitize_filename
class TopicInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–µ —Ñ–æ—Ä—É–º–∞."""

    def __init__(self, topic_id: int, title: str, icon_emoji: str = "",
                 creator_id: Optional[int] = None, created_date: Optional[datetime] = None,
                 message_count: int = 0, is_closed: bool = False, is_pinned: bool = False):
        self.topic_id = topic_id
        self.title = title
        self.icon_emoji = icon_emoji
        self.creator_id = creator_id
        self.created_date = created_date
        self.message_count = message_count
        self.is_closed = is_closed
        self.is_pinned = is_pinned
        self.safe_name = sanitize_filename(f"{title}_{topic_id}")

    def __repr__(self):
        status = []
        if self.is_pinned:
            status.append("üìå")
        if self.is_closed:
            status.append("üîí")
        status_str = " ".join(status)
        return f"Topic({self.topic_id}, '{self.title}', {self.message_count} msgs{' ' + status_str if status_str else ''})"
class ForumManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä—É–º–∞–º–∏ –∏ —Ç–æ–ø–∏–∫–∞–º–∏ –≤ Telegram."""

    def __init__(self, client: TelegramClient, config: Config):
        self.client = client
        self.config = config
        self.topics_cache: Dict[Union[str, int], List[TopicInfo]] = {}
        self.entity_cache: Dict[Union[str, int], Any] = {}

    async def is_forum_chat(self, entity: Any) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º —Å —Ç–æ–ø–∏–∫–∞–º–∏.

        Args:
            entity: Telegram entity (Chat –∏–ª–∏ Channel)

        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º
        """
        try:
            logger.info(f"Checking if entity is forum: {type(entity)}")
            logger.info(f"Entity attributes: {[attr for attr in dir(entity) if not attr.startswith('_')]}")

            if isinstance(entity, Channel):
                forum_attr = getattr(entity, 'forum', False)
                logger.info(f"Entity forum attribute: {forum_attr}")
                return forum_attr
            elif isinstance(entity, Chat):
                # –û–±—ã—á–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ç–æ–ø–∏–∫–∏
                logger.info("Entity is Chat type - not a forum")
                return False

            logger.info(f"Entity is {type(entity)} - not a known forum type")
            return False
        except Exception as e:
            logger.warning(f"Error checking if entity is forum: {e}")
            return False

    async def get_forum_topics(self, entity: Any, force_refresh: bool = False) -> List[TopicInfo]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞.

        Args:
            entity: Telegram entity —Ñ–æ—Ä—É–º–∞
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à

        Returns:
            List[TopicInfo]: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        """
        entity_id = str(getattr(entity, 'id', entity))

        if not force_refresh and entity_id in self.topics_cache:
            return self.topics_cache[entity_id]

        topics = []

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º retry manager –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            async def _fetch_topics():
                result = await self.client(GetForumTopicsRequest(
                    channel=entity,
                    offset_date=None,
                    offset_id=0,
                    offset_topic=0,
                    limit=100
                ))
                return result

            result = await retry_manager.retry_async(
                _fetch_topics,
                f"fetch_forum_topics_{entity_id}",
                TELEGRAM_API_CONFIG
            )

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–∞ API
            logger.info(f"API Response type: {type(result)}")
            logger.info(f"API Response attributes: {[attr for attr in dir(result) if not attr.startswith('_')]}")

            if hasattr(result, 'topics'):
                logger.info(f"Found {len(result.topics)} topics in API response")

                for i, topic in enumerate(result.topics):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø ForumTopic
                    if not isinstance(topic, ForumTopic):
                        logger.warning(f"Topic {i+1} is not ForumTopic type: {type(topic)}")
                        continue

                    logger.info(f"\n--- Topic {i+1} Debug Info ---")
                    logger.info(f"Topic type: {type(topic)}")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    topic_id = topic.id
                    title = topic.title

                    logger.info(f"Processing topic: {title} (ID: {topic_id})")

                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    icon_emoji_id = getattr(topic, 'icon_emoji_id', None)
                    icon_color = getattr(topic, 'icon_color', None)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞
                    if icon_emoji_id:
                        icon_emoji = "üí¨"  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é, –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —ç–º–æ–¥–∑–∏ –ø–æ ID
                    else:
                        icon_emoji = "üí¨"

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
                    is_closed = getattr(topic, 'closed', False)
                    is_pinned = getattr(topic, 'pinned', False)

                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    message_count = await self._get_topic_message_count_via_api(entity, topic_id)

                    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    created_date = getattr(topic, 'date', None)

                    logger.info(f"Extracted: ID={topic_id}, Title='{title}', Messages={message_count}, Closed={is_closed}, Pinned={is_pinned}")

                    if message_count == 0:
                        message_count = await self.get_topic_message_count(entity, topic_id)

                    # –°–æ–∑–¥–∞–µ–º TopicInfo
                    topic_info = TopicInfo(
                        topic_id=topic_id,
                        title=title,
                        icon_emoji=icon_emoji,
                        created_date=created_date,
                        is_closed=is_closed,
                        is_pinned=is_pinned,
                        message_count=message_count
                    )
                    topics.append(topic_info)

                    logger.info(f"Created TopicInfo: {topic_info}")
            else:
                logger.error("API result has no 'topics' attribute")

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.topics_cache[entity_id] = topics

            logger.info(f"Found {len(topics)} topics in forum {entity_id}")

        except FloodWaitError as e:
            logger.warning(f"Rate limited when fetching topics: {e.seconds}s wait")
            await asyncio.sleep(e.seconds + 1)
            return await self.get_forum_topics(entity, force_refresh=True)
        except (ChannelPrivateError, ChatAdminRequiredError, PeerIdInvalidError) as e:
            logger.error(f"Access denied to forum {entity_id}: {type(e).__name__}")
            return []
        except Exception as e:
            logger.error(f"Error fetching forum topics for {entity_id}: {e}")
            return []

        return topics

    async def _get_topic_message_count_via_api(self, entity: Any, topic_id: int) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ.

        Args:
            entity: Telegram entity —Ñ–æ—Ä—É–º–∞
            topic_id: ID —Ç–æ–ø–∏–∫–∞

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ
        """
        try:
            result = await self.client.get_messages(
                entity,
                reply_to=topic_id,
                limit=0
            )

            count = getattr(result, 'total', 0)
            if count > 0:
                count -= 1

            return count

        except Exception as e:
            logger.debug(f"Failed to get message count for topic {topic_id}: {e}")
            count = 0
            try:
                async for message in self.client.iter_messages(entity, reply_to=topic_id, limit=100):
                    if message.id != topic_id:
                        count += 1
                return count
            except Exception as e2:
                logger.error(f"Error counting messages for topic {topic_id}: {e2}")
                return 0

    async def get_topic_message_count(self, entity: Any, topic_id: int) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ.

        Args:
            entity: Telegram entity —Ñ–æ—Ä—É–º–∞
            topic_id: ID —Ç–æ–ø–∏–∫–∞

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ
        """
        try:
            result = await self.client.get_messages(
                entity,
                reply_to=topic_id,
                limit=0
            )

            count = getattr(result, 'total', 0)
            if count > 0:
                count -= 1

            return count

        except Exception as e:
            logger.error(f"Error getting message count for topic {topic_id}: {e}")
            return 0

    async def get_topic_messages(self, entity: Any, topic_id: int,
                                limit: Optional[int] = None,
                                min_id: Optional[int] = None) -> List[Message]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞.

        Args:
            entity: Telegram entity —Ñ–æ—Ä—É–º–∞
            topic_id: ID —Ç–æ–ø–∏–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            min_id: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞)

        Returns:
            List[Message]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ø–∏–∫–∞
        """
        messages = []
        entity_id = str(getattr(entity, 'id', entity))

        try:
            logger.info(f"Fetching messages from topic {topic_id} in forum {entity_id}")

            async for message in self.client.iter_messages(
                entity=entity,
                reply_to=topic_id,
                limit=limit,
                min_id=min_id or 0,
                reverse=True
            ):
                if message.id != topic_id:
                    messages.append(message)

            logger.info(f"Retrieved {len(messages)} messages from topic {topic_id}")

        except FloodWaitError as e:
            logger.warning(f"Rate limited when fetching topic messages: {e.seconds}s wait")
            await asyncio.sleep(e.seconds + 1)
            return await self.get_topic_messages(entity, topic_id, limit, min_id)
        except Exception as e:
            logger.error(f"Error fetching messages from topic {topic_id}: {e}")

        return messages

    def _message_belongs_to_topic(self, message: Message, topic_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–æ–ø–∏–∫—É.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            topic_id: ID —Ç–æ–ø–∏–∫–∞

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–ø–∏–∫—É
        """
        try:
            if not message or not hasattr(message, 'id'):
                return False

            if message.id == topic_id:
                return True

            if hasattr(message, 'reply_to') and message.reply_to is not None:
                top_id = getattr(message.reply_to, 'reply_to_top_id', None)
                if top_id == topic_id:
                    return True

                reply_msg_id = getattr(message.reply_to, 'reply_to_msg_id', None)
                if reply_msg_id == topic_id:
                    return True

            return False

        except Exception:
            return False

    async def create_export_targets_from_forum(self, entity: Any,
                                              topic_filter: Optional[List[int]] = None) -> List[ExportTarget]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ü–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞.

        Args:
            entity: Telegram entity —Ñ–æ—Ä—É–º–∞
            topic_filter: –°–ø–∏—Å–æ–∫ ID —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (None = –≤—Å–µ)

        Returns:
            List[ExportTarget]: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–ø–∏–∫–∞
        """
        entity_id = str(getattr(entity, 'id', entity))
        entity_name = getattr(entity, 'title', f"Forum_{entity_id}")

        topics = await self.get_forum_topics(entity)
        if not topics:
            logger.warning(f"No topics found in forum {entity_id}")
            return []

        targets = []

        for topic in topics:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ø–∏–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä
            if topic_filter and topic.topic_id not in topic_filter:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–æ–ø–∏–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
            if topic.is_closed and not self.config.export_closed_topics:
                logger.info(f"Skipping closed topic: {topic.title}")
                continue

            target = ExportTarget(
                id=entity_id,
                name=f"{entity_name} > {topic.title}",
                type="forum_topic",
                is_forum=True,
                topic_id=topic.topic_id,
                export_all_topics=False,
                estimated_messages=topic.message_count
            )
            targets.append(target)

        logger.info(f"Created {len(targets)} export targets for forum topics")
        return targets

    async def detect_topic_from_url(self, url: str) -> Optional[Tuple[str, int]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç chat_id –∏ topic_id –∏–∑ URL —Ç–æ–ø–∏–∫–∞.

        Args:
            url: URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/c/chat_id/topic_id

        Returns:
            Optional[Tuple[str, int]]: (chat_id, topic_id) –∏–ª–∏ None
        """
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ URL —Ç–æ–ø–∏–∫–∞
        topic_pattern = r't\.me/c/(\d+)/(\d+)'
        match = re.search(topic_pattern, url)

        if match:
            chat_id = f"-100{match.group(1)}"  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–ª–Ω—ã–π chat_id
            topic_id = int(match.group(2))
            return chat_id, topic_id

        return None

    def get_forum_export_path(self, base_path: Path, entity_name: str) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–æ—Ä—É–º–∞.

        Args:
            base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
            entity_name: –ò–º—è —Ñ–æ—Ä—É–º–∞

        Returns:
            Path: –ü—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–æ—Ä—É–º–∞
        """
        safe_entity_name = sanitize_filename(entity_name)
        forum_path = base_path / f"Forum_{safe_entity_name}"

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        forum_path.mkdir(parents=True, exist_ok=True)
        (forum_path / "media").mkdir(exist_ok=True)

        return forum_path

    def get_topic_note_path(self, forum_path: Path, topic_info: TopicInfo) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞.

        Args:
            forum_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Ñ–æ—Ä—É–º–∞
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–µ

        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞
        """
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        emoji = topic_info.icon_emoji if topic_info.icon_emoji else "üìù"
        safe_title = sanitize_filename(topic_info.title)
        filename = f"{emoji} {safe_title} (Topic_{topic_info.topic_id}).md"

        return forum_path / filename

    def get_topic_media_path(self, forum_path: Path, topic_info: TopicInfo) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ —Ç–æ–ø–∏–∫–∞.

        Args:
            forum_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Ñ–æ—Ä—É–º–∞
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–µ

        Returns:
            Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –º–µ–¥–∏–∞ —Ç–æ–ø–∏–∫–∞
        """
        media_path = forum_path / "media" / f"topic_{topic_info.topic_id}"
        media_path.mkdir(parents=True, exist_ok=True)
        (media_path / "images").mkdir(exist_ok=True)
        (media_path / "videos").mkdir(exist_ok=True)
        (media_path / "documents").mkdir(exist_ok=True)
        (media_path / "audio").mkdir(exist_ok=True)

        return media_path

    async def create_topic_note_header(self, topic_info: TopicInfo, forum_name: str,
                                      message_count: int = 0) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞.

        Args:
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–µ
            forum_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä—É–º–∞
            message_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            str: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        """
        emoji = topic_info.icon_emoji if topic_info.icon_emoji else "üìù"
        status_icons = []

        if topic_info.is_pinned:
            status_icons.append("üìå")
        if topic_info.is_closed:
            status_icons.append("üîí")

        status_str = " ".join(status_icons)

        header = f"""# {emoji} {topic_info.title}

> **Forum:** {forum_name}
> **Topic ID:** {topic_info.topic_id}
> **Status:** {'üîí Closed' if topic_info.is_closed else 'üîì Open'} {status_str}
> **Messages:** {message_count}
> **Created:** {topic_info.created_date.strftime('%Y-%m-%d %H:%M:%S') if topic_info.created_date else 'Unknown'}
> **Exported:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

"""
        return header

    async def append_message_to_topic_note(self, note_path: Path, message_content: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞–º–µ—Ç–∫–µ —Ç–æ–ø–∏–∫–∞.

        Args:
            note_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–º–µ—Ç–∫–∏
            message_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ markdown
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if note_path.exists():
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É
                async with aiofiles.open(note_path, 'a', encoding='utf-8') as f:
                    await f.write(f"\n{message_content}\n")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)
                async with aiofiles.open(note_path, 'w', encoding='utf-8') as f:
                    await f.write(f"{message_content}\n")

        except Exception as e:
            logger.error(f"Error appending to topic note {note_path}: {e}")
            raise

    async def append_message_to_topic_note(self, topic_file: Path, message: any,
                                          media_processor: any = None,
                                          relative_media_path: str = "_media",
                                          is_pinned: bool = False) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–º–µ—Ç–∫—É —Ç–æ–ø–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ Telegram.

        Args:
            topic_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            media_processor: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–µ–¥–∏–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            relative_media_path: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–µ–¥–∏–∞
            is_pinned: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            msg_time = message.date.strftime('%H:%M') if message.date else "??:??"
            msg_date = message.date.strftime('%d.%m.%Y') if message.date else "Unknown"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_name = "Unknown"
            sender_display = "üë§ Unknown"

            if hasattr(message, 'sender') and message.sender:
                first_name = getattr(message.sender, 'first_name', '')
                last_name = getattr(message.sender, 'last_name', '')
                username = getattr(message.sender, 'username', '')

                if first_name:
                    sender_name = first_name
                    if last_name:
                        sender_name += f" {last_name}"
                elif username:
                    sender_name = username
                else:
                    sender_name = f"User_{message.sender.id}"

                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è
                sender_display = f"üë§ **{sender_name}**"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_block = ""
            if hasattr(message, 'reply_to') and message.reply_to:
                reply_block = """
> üí¨ *–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ*
>
"""

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content_parts = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
            if message.media:
                media_info = self._format_media_info(message, relative_media_path)
                if media_info:
                    content_parts.append(media_info)

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            if message.text:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                text_content = message.text
                if len(text_content) > 200:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    text_content = f"```\n{text_content}\n```"
                content_parts.append(text_content)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∫–æ–Ω–∫–∏
            msg_icon = "üìå" if is_pinned else "üí¨"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ Telegram
            if is_pinned:
                message_block = f"""
## {msg_icon} –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

**{sender_name}** ‚Ä¢ {msg_time}

{reply_block}{"".join(content_parts) if content_parts else "*[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*"}

---

"""
            else:
                message_block = f"""
{sender_display} ‚Ä¢ `{msg_time}`

{reply_block}{"".join(content_parts) if content_parts else "*[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]*"}

---

"""

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
            with open(topic_file, 'a', encoding='utf-8') as f:
                f.write(message_block)

            return True

        except Exception as e:
            logger.error(f"Error appending message to topic note: {e}")
            return False

    def _format_media_info(self, message: any, relative_media_path: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ —Å—Ç–∏–ª–µ Telegram UI."""
        if not message.media:
            return ""

        media_type = type(message.media).__name__

        if hasattr(message.media, 'photo'):
            return f"üì∑ *Photo*\n\n![üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({relative_media_path}/images/photo_{message.id}.jpg)\n"
        elif hasattr(message.media, 'document'):
            doc = message.media.document
            if doc.mime_type and doc.mime_type.startswith('video/'):
                return f"üìπ *Video*\n\n‚ñ∂Ô∏è [–í–∏–¥–µ–æ]({relative_media_path}/videos/video_{message.id}.mp4)\n"
            elif doc.mime_type and doc.mime_type.startswith('audio/'):
                if hasattr(doc, 'attributes'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    for attr in doc.attributes:
                        if hasattr(attr, 'voice') and attr.voice:
                            return f"üéµ *Voice message*\n\nüé§ [–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]({relative_media_path}/audio/voice_{message.id}.ogg)\n"
                return f"üéµ *Audio*\n\nüé∂ [–ê—É–¥–∏–æ —Ñ–∞–π–ª]({relative_media_path}/audio/audio_{message.id}.ogg)\n"
            else:
                filename = getattr(doc, 'file_name', f'document_{message.id}')
                file_size = getattr(doc, 'size', 0)
                size_str = f" ({self._format_file_size(file_size)})" if file_size > 0 else ""
                return f"üìé *Document*: `{filename}`{size_str}\n\nüìÑ [–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç]({relative_media_path}/documents/{filename})\n"
        elif hasattr(message.media, 'webpage'):
            webpage = message.media.webpage
            title = getattr(webpage, 'title', '–°—Å—ã–ª–∫–∞')
            return f"üîó *Link*: **{title}**\n\n[üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É]({webpage.url})\n"

        return f"üìé *{media_type}*\n"

    def _format_file_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ."""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.1f} KB"
        elif size_bytes < 1024 * 1024 * 1024:
            return f"{size_bytes / (1024 * 1024):.1f} MB"
        else:
            return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"

    async def create_topic_note(self, topic_info: TopicInfo, forum_name: str,
                               note_path: Path, member_count: int = 0) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ç–æ–ø–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ Telegram.

        Args:
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–µ
            forum_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä—É–º–∞
            note_path: –ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            member_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram
            icon = topic_info.icon_emoji or "üí¨"
            created_date = topic_info.created_date.strftime('%d.%m.%Y') if topic_info.created_date else "Unknown"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–∞
            status_icons = []
            if topic_info.is_pinned:
                status_icons.append("üìå")
            if topic_info.is_closed:
                status_icons.append("üîí")

            status_text = " ".join(status_icons) + " " if status_icons else ""

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            member_text = f"{member_count} members" if member_count > 0 else "—É—á–∞—Å—Ç–Ω–∏–∫–∏"

            header = f"""# {status_text}{icon} {topic_info.title}

> üì± **–≠–∫—Å–ø–æ—Ä—Ç –∏–∑ Telegram**
> üè† –§–æ—Ä—É–º: **{forum_name}**
> üë• {member_text}
> üìÖ –°–æ–∑–¥–∞–Ω: {created_date}
> üÜî Topic ID: `{topic_info.topic_id}`

---

"""

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            with open(note_path, 'w', encoding='utf-8') as f:
                f.write(header)

            logger.info(f"Created topic note: {note_path}")
            return note_path

        except Exception as e:
            logger.error(f"Error creating topic note: {e}")
            raise

    async def get_topic_statistics(self, entity: Any) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–ø–∏–∫–∞–º —Ñ–æ—Ä—É–º–∞.

        Args:
            entity: Telegram entity —Ñ–æ—Ä—É–º–∞

        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ø–∏–∫–æ–≤
        """
        topics = await self.get_forum_topics(entity)

        stats = {
            "total_topics": len(topics),
            "closed_topics": sum(1 for t in topics if t.is_closed),
            "pinned_topics": sum(1 for t in topics if t.is_pinned),
            "estimated_total_messages": sum(t.message_count for t in topics),
            "topics_by_name": {t.title: t.topic_id for t in topics}
        }

        return stats

    def format_topic_info_for_display(self, topics: List[TopicInfo]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not topics:
            return "No topics found in this forum."

        lines = ["Available Forum Topics:"]
        lines.append("=" * 50)

        for i, topic in enumerate(topics, 1):
            status_icons = []
            if topic.is_pinned:
                status_icons.append("üìå")
            if topic.is_closed:
                status_icons.append("üîí")

            status_str = " ".join(status_icons)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ icon_emoji –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ID
            icon = topic.icon_emoji if topic.icon_emoji and len(topic.icon_emoji) <= 2 else "üí¨"

            lines.append(f"{i:2d}. {icon} {topic.title} (ID: {topic.topic_id})")
            lines.append(f"     Messages: ~{topic.message_count} {status_str}")

        return "\n".join(lines)

    async def resolve_forum_entity(self, identifier: str) -> Optional[Any]:
        """
        –†–∞–∑—Ä–µ—à–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ä—É–º–∞ –≤ Telegram entity.

        Args:
            identifier: ID, username –∏–ª–∏ URL —Ñ–æ—Ä—É–º–∞

        Returns:
            Optional[Any]: Telegram entity –∏–ª–∏ None
        """
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ URL —Ç–æ–ø–∏–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º chat_id
            if '/c/' in identifier:
                result = await self.detect_topic_from_url(identifier)
                if result:
                    chat_id, _ = result
                    identifier = chat_id

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è entity
            entity = await self.client.get_entity(identifier)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä—É–º
            if await self.is_forum_chat(entity):
                return entity
            else:
                logger.warning(f"Entity {identifier} is not a forum chat")
                return None

        except Exception as e:
            logger.error(f"Error resolving forum entity {identifier}: {e}")
            return None

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Ç–æ–ø–∏–∫–æ–≤."""
        self.topics_cache.clear()
        self.entity_cache.clear()
        logger.info("Forum manager cache cleared")
